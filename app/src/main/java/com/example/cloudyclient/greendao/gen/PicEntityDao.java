package com.example.cloudyclient.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cloudyclient.model.bean.PicEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PIC_ENTITY".
*/
public class PicEntityDao extends AbstractDao<PicEntity, Long> {

    public static final String TABLENAME = "PIC_ENTITY";

    /**
     * Properties of entity PicEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FileName = new Property(1, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileSize = new Property(2, Long.class, "fileSize", false, "FILE_SIZE");
        public final static Property FMake = new Property(3, String.class, "FMake", false, "FMAKE");
        public final static Property FModel = new Property(4, String.class, "FModel", false, "FMODEL");
        public final static Property FDateTime = new Property(5, String.class, "FDateTime", false, "FDATE_TIME");
        public final static Property FFNumber = new Property(6, String.class, "FFNumber", false, "FFNUMBER");
        public final static Property FExposureTime = new Property(7, String.class, "FExposureTime", false, "FEXPOSURE_TIME");
        public final static Property FISOSpeedRatings = new Property(8, String.class, "FISOSpeedRatings", false, "FISOSPEED_RATINGS");
        public final static Property FFocalLength = new Property(9, String.class, "FFocalLength", false, "FFOCAL_LENGTH");
        public final static Property FImageLength = new Property(10, String.class, "FImageLength", false, "FIMAGE_LENGTH");
        public final static Property FImageWidth = new Property(11, String.class, "FImageWidth", false, "FIMAGE_WIDTH");
        public final static Property MD5 = new Property(12, String.class, "MD5", false, "MD5");
    }


    public PicEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PicEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PIC_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FILE_NAME\" TEXT UNIQUE ," + // 1: fileName
                "\"FILE_SIZE\" INTEGER," + // 2: fileSize
                "\"FMAKE\" TEXT," + // 3: FMake
                "\"FMODEL\" TEXT," + // 4: FModel
                "\"FDATE_TIME\" TEXT," + // 5: FDateTime
                "\"FFNUMBER\" TEXT," + // 6: FFNumber
                "\"FEXPOSURE_TIME\" TEXT," + // 7: FExposureTime
                "\"FISOSPEED_RATINGS\" TEXT," + // 8: FISOSpeedRatings
                "\"FFOCAL_LENGTH\" TEXT," + // 9: FFocalLength
                "\"FIMAGE_LENGTH\" TEXT," + // 10: FImageLength
                "\"FIMAGE_WIDTH\" TEXT," + // 11: FImageWidth
                "\"MD5\" TEXT UNIQUE );"); // 12: MD5
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PIC_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PicEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(2, fileName);
        }
 
        Long fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindLong(3, fileSize);
        }
 
        String FMake = entity.getFMake();
        if (FMake != null) {
            stmt.bindString(4, FMake);
        }
 
        String FModel = entity.getFModel();
        if (FModel != null) {
            stmt.bindString(5, FModel);
        }
 
        String FDateTime = entity.getFDateTime();
        if (FDateTime != null) {
            stmt.bindString(6, FDateTime);
        }
 
        String FFNumber = entity.getFFNumber();
        if (FFNumber != null) {
            stmt.bindString(7, FFNumber);
        }
 
        String FExposureTime = entity.getFExposureTime();
        if (FExposureTime != null) {
            stmt.bindString(8, FExposureTime);
        }
 
        String FISOSpeedRatings = entity.getFISOSpeedRatings();
        if (FISOSpeedRatings != null) {
            stmt.bindString(9, FISOSpeedRatings);
        }
 
        String FFocalLength = entity.getFFocalLength();
        if (FFocalLength != null) {
            stmt.bindString(10, FFocalLength);
        }
 
        String FImageLength = entity.getFImageLength();
        if (FImageLength != null) {
            stmt.bindString(11, FImageLength);
        }
 
        String FImageWidth = entity.getFImageWidth();
        if (FImageWidth != null) {
            stmt.bindString(12, FImageWidth);
        }
 
        String MD5 = entity.getMD5();
        if (MD5 != null) {
            stmt.bindString(13, MD5);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PicEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(2, fileName);
        }
 
        Long fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindLong(3, fileSize);
        }
 
        String FMake = entity.getFMake();
        if (FMake != null) {
            stmt.bindString(4, FMake);
        }
 
        String FModel = entity.getFModel();
        if (FModel != null) {
            stmt.bindString(5, FModel);
        }
 
        String FDateTime = entity.getFDateTime();
        if (FDateTime != null) {
            stmt.bindString(6, FDateTime);
        }
 
        String FFNumber = entity.getFFNumber();
        if (FFNumber != null) {
            stmt.bindString(7, FFNumber);
        }
 
        String FExposureTime = entity.getFExposureTime();
        if (FExposureTime != null) {
            stmt.bindString(8, FExposureTime);
        }
 
        String FISOSpeedRatings = entity.getFISOSpeedRatings();
        if (FISOSpeedRatings != null) {
            stmt.bindString(9, FISOSpeedRatings);
        }
 
        String FFocalLength = entity.getFFocalLength();
        if (FFocalLength != null) {
            stmt.bindString(10, FFocalLength);
        }
 
        String FImageLength = entity.getFImageLength();
        if (FImageLength != null) {
            stmt.bindString(11, FImageLength);
        }
 
        String FImageWidth = entity.getFImageWidth();
        if (FImageWidth != null) {
            stmt.bindString(12, FImageWidth);
        }
 
        String MD5 = entity.getMD5();
        if (MD5 != null) {
            stmt.bindString(13, MD5);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PicEntity readEntity(Cursor cursor, int offset) {
        PicEntity entity = new PicEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fileName
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // fileSize
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FMake
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FModel
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FDateTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FFNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FExposureTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FISOSpeedRatings
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // FFocalLength
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // FImageLength
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // FImageWidth
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // MD5
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PicEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFileName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFileSize(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setFMake(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFModel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFDateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFFNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFExposureTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFISOSpeedRatings(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFFocalLength(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFImageLength(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFImageWidth(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMD5(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PicEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PicEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PicEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
